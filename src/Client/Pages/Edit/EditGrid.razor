@using System.Numerics
@using Domain.Entities
@using Client.Components.Ui.Form
@inherits UiComponentBase


<FormField>
    <FormLabel>
        @(DimensionChosen ? "Grid Data" : "Grid Dimensions")
    </FormLabel>

    @if (DimensionChosen)
    {
        <div id="grid-choose-dimensions" class="grid @ColumnClass gap-2 justify-stretch">
            @foreach (var (rowIdx, row) in Grid.Data.Index())
            {
                foreach (var (colIdx, col) in row.Index())
                {
                    <input
                        value="@(Grid.Data[rowIdx][colIdx])"
                        @onchange="@(async (ChangeEventArgs args) => await UpdateColumn(args, rowIdx, colIdx))"
                        class="text-background"/>
                }
            }
        </div>
    }
    else
    {
        <div id="grid-edit-data" class="grid grid-cols-3 gap-1 bg-secondary p-2 rounded-lg w-fit"
             @onmouseleave="@(() => CurrentlyHovered = (-1, -1))">

            @for (var row = 0; row < 3; row++)
            {
                var currentRow = row;

                for (var col = 0; col < 3; col++)
                {
                    var currentCol = col;

                    var isHighlighted = row <= CurrentlyHovered.Row && col <= CurrentlyHovered.Col;
                    var bgClass = isHighlighted ? "bg-primary" : "bg-secondary";
                    var cellClass = $"w-8 h-8 border border-primary transition-colors duration-200 {bgClass}";

                    <button class="@cellClass"
                            @onmouseover="@(() => CurrentlyHovered = (currentRow, currentCol))"
                            @onclick="@(() => CreateGrid(currentRow + 1, currentCol + 1))">
                    </button>
                }
            }
        </div>
    }
</FormField>

@code {

    [Parameter, EditorRequired]
    public GridComponent Grid { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<GridComponent> GridChanged { get; set; }

    private (int Row, int Col) CurrentlyHovered { get; set; } = (-1, -1);
    private bool DimensionChosen => Grid.Dimensions != new Vector2(2, 2);
    
    private string ColumnClass => Grid.Dimensions.Y switch
    {
        -1 or 0 or 1 => "grid-cols-1",
        2 => "grid-cols-2",
        3 => "grid-cols-3",
        _ => throw new NotImplementedException()
    };

    private async Task UpdateColumn(ChangeEventArgs args, int rowIdx, int colIdx)
    {
        Grid.Data[rowIdx][colIdx] = (string)args.Value!;
        await GridChanged.InvokeAsync(Grid);
    }

    private void CreateGrid(int currentRow, int currentCol)
    {
        Grid.Dimensions = new(currentRow, currentCol);
        Console.WriteLine(Grid.Dimensions);
        Grid.Data = new string[currentRow][];
        for (var i = 0; i < currentRow; i++)
        {
            Grid.Data[i] = new string[currentCol];
        }
    }

}