@using System.Numerics
@using Domain.Entities

<div id="grid-edit-data" class="grid grid-cols-3 gap-1 bg-secondary p-2 rounded-lg w-fit"
     @onmouseleave="@(() => CurrentlyHovered = (-1, -1))">

    @for (var row = 0; row < 3; row++)
    {
        var currentRow = row;

        for (var col = 0; col < 3; col++)
        {
            var currentCol = col;

            var isHighlighted = row <= CurrentlyHovered.Row && col <= CurrentlyHovered.Col;
            var bgClass = isHighlighted ? "bg-primary" : "bg-secondary";
            var cellClass = $"w-8 h-8 border border-primary transition-colors duration-200 {bgClass}";

            <button class="@cellClass"
                    @onmouseover="@(() => CurrentlyHovered = (currentRow, currentCol))"
                    @onclick="@(() => CreateGrid(currentRow + 1, currentCol + 1))">
            </button>
        }
    }
</div>

@code {
    [CascadingParameter]
    private GridComponent Grid { get; set; } = null!;

    [CascadingParameter]
    private EventCallback<GridComponent> GridChanged { get; set; }

    private (int Row, int Col) CurrentlyHovered { get; set; } = (-1, -1);
    private void CreateGrid(int currentRow, int currentCol)
    {
        Grid.Dimensions = new Vector2(currentRow, currentCol);
        Grid.Data = new string[currentRow][];
        for (var i = 0; i < currentRow; i++)
        {
            Grid.Data[i] = new string[currentCol];
        }

        InvokeAsync(() => GridChanged.InvokeAsync(Grid));
    }
}