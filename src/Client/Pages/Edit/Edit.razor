@page "/edit/{Id:guid}"
@attribute [StreamRendering]
@using Domain.Entities
@using Client.Components.Ui.Form

<PageTitle>Create new form</PageTitle>

@if (UserForm is not null)
{
    <AppForm @bind-Model="UserForm" OnValidSubmit="@SaveForm" novalidate>
        <div class="w-full h-full grid grid-cols-1 md:grid-cols-3 gap-4">
            <FormField>
                <FormLabel>Form name</FormLabel>
                <FormInputText @bind-Value="UserForm.Name" required/>
            </FormField>

            <FormField>
                <FormLabel>Save your changes</FormLabel>
                <Button type="submit" Variant="default">
                    <Blazicon Svg="@Icons.Save"/>
                    Save
                    @if (_hasChangesSinceLastSave)
                    {
                        <span>(unsaved)</span>
                    }
                </Button>
            </FormField>

            <FormField>
                <FormLabel>Click to preview</FormLabel>
                <Button type="button" Variant="outline" @onclick="@Preview" disabled="@_hasChangesSinceLastSave">
                    <Blazicon Svg="@Icons.Play"/>
                    Preview
                    @if (_hasChangesSinceLastSave)
                    {
                        @:(Please save changes)
                    }
                </Button>
            </FormField>
        </div>

        <div class="w-full grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card id="element-picker">
                <CardHeader>
                    <CardTitle>Components</CardTitle>
                </CardHeader>
                <CardContent>
                    <ul class="flex flex-col justify-start items-stretch gap-2">
                        @foreach (var componentType in PickerComponents)
                        {
                            var currentlyDragging = _draggingComponentType == componentType;
                            var borderClass = currentlyDragging ? "border-primary" : "border-border";
                            var component = BaseComponentChoice.CreateDefault(componentType, UserForm.Id);

                            <div
                                class="@($"p-4 bg-secondary text-secondary-foreground rounded-md border-2 border-dashed text-center align-middle {borderClass}")"
                                draggable="true"
                                style="touch-action: none;"
                                @ondragstart="@(() => OnPickerDragStart(componentType))"
                                @ondragend="@OnDragEnd">

                                <RenderComponentChoice Component="component"/>
                            </div>
                        }
                    </ul>
                </CardContent>
            </Card>

            <Card id="builder" ondragover="event.preventDefault();">
                <CardHeader>
                    <CardTitle>Form</CardTitle>
                </CardHeader>
                <CardContent>
                    <ul class="flex flex-col justify-start items-stretch gap-2">
                        @foreach (var (idx, componentChoice) in UserForm.Fields.Index())
                        {
                            var currentlyEditing = CurrentlyEditing?.Id == componentChoice.Id;
                            var borderClass = currentlyEditing ? "border-primary" : "border-border";

                            <div
                                class="drop-zone h-full grow flex justify-center items-center p-4 rounded-md border-2 border-dashed backdrop-blur-sm"
                                ondragover="event.preventDefault();"
                                @ondrop="@(e => OnDropAt(idx))">
                                <Blazicon Svg="@Icons.Plus"/>
                            </div>

                            <span
                                class="@($"relative p-4 bg-secondary text-secondary-foreground border-2 border-dashed rounded-md text-center align-middle {borderClass}")"
                                draggable="true"
                                @ondragstart="@(() => OnBuilderDragStart(idx))"
                                @ontouchstart="@(() => OnBuilderDragStart(idx))"
                                @ondragend="@OnDragEnd">

                            <div class="block mb-5 p-4">
                                <RenderComponentChoice Component="componentChoice"/>
                            </div>

                            <span
                                class="order-badge absolute top-0 left-[5px] w-[20px] rounded-b-md bg-primary text-primary-foreground p-2 text-xs rounded-bl-md">
                                @(idx + 1)
                            </span>

                            <span @onclick="@(() => EditItem(idx))"
                                  class="absolute top-0 right-7 cursor-pointer bg-primary text-primary-foreground p-2 text-xs"
                                  draggable="false">
                                <Blazicon Svg="@Icons.Pencil"/>
                            </span>

                            <span @onclick="@(() => RemoveItem(idx))"
                                  class="absolute top-0 right-0 cursor-pointer bg-destructive text-destructive-foreground p-2 text-xs rounded-tr-sm"
                                  draggable="false">
                                <Blazicon Svg="@Icons.X"/>
                            </span>
                        </span>
                        }

                        <div
                            class="drop-zone h-full grow flex justify-center items-center p-4 rounded-md border-2 border-dashed border-border backdrop-blur-sm"
                            ondragover="event.preventDefault();"
                            @ondrop="@(e => OnDropAt(UserForm.Fields.Count))">
                            <Blazicon Svg="@Icons.Plus"/>
                        </div>
                    </ul>
                </CardContent>
            </Card>

            <Card id="edit-panel">
                @if (CurrentlyEditing is not null)
                {
                    <CardHeader>
                        <CardTitle>Editing: @CurrentlyEditing.Label @(UserForm.Fields.IndexOf(CurrentlyEditing) + 1)</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <EditSelectedComponent Component="CurrentlyEditing" ComponentChanged="StateHasChanged"/>
                    </CardContent>
                }
            </Card>
        </div>
    </AppForm>
}
else
{
    <h1>Loading...</h1>
}