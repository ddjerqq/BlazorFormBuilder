@page "/preview/{Id:guid}"
@using System.Text.Json
@using Client.Services
@using Domain.Aggregates
@using Client.Pages.Edit
@using Client.Components.Ui.Form
@using Domain.Common
@using Domain.Entities
@attribute [StreamRendering]
@inject FormApiClient Api

<h1 class="mb-4 font-bold text-2xl">Form preview</h1>

<div class="flex justify-start gap-4 mb-4">
    <Button Variant="outline" Size="icon" @onclick="@(() => Width = "w-full")">
        <Blazicon Svg="@Icons.Monitor"/>
    </Button>

    <Button Variant="outline" Size="icon" @onclick="@(() => Width = "w-[640px]")">
        <Blazicon Svg="@Icons.Tablet"/>
    </Button>

    <Button Variant="outline" Size="icon" @onclick="@(() => Width = "w-[360px]")">
        <Blazicon Svg="@Icons.Smartphone"/>
    </Button>
</div>

@if (Form is not null)
{
    <div class="w-full flex justify-center">
        <Card class="@Width">
            <CardHeader>
                <CardTitle>@Form.Name</CardTitle>
            </CardHeader>
            <CardContent>
                <AppForm @bind-Model="Form" OnValidSubmit="OnValidSubmit" class="grid gap-4">
                    @foreach (var field in Form.Fields)
                    {
                        <RenderComponentChoice Component="field"/>
                    }
                </AppForm>
            </CardContent>
            <CardFooter class="text-xs text-muted-foreground">
                Form ID: @Form.Id
            </CardFooter>
        </Card>
    </div>
}
else
{
    @:Loading...
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UserForm? Form { get; set; }

    private string Width { get; set; } = "w-full";

    protected override async Task OnInitializedAsync()
    {
        Form = await Api.GetById(Id);
        if (Form is not null)
        {
            Form.SortFields();
        }
        else
        {
            ShowError("Form not found");
        }
    }

    private void OnValidSubmit()
    {
        Dictionary<string, object> values = Form.Fields
            .Select(field => new
            {
                name = field.Label,
                value = field switch
                {
                    CheckboxInput checkboxInput => (object)checkboxInput.Checked,
                    DateInput dateInput => (object)dateInput.SelectedDate,
                    NumberInput numberInput => (object)numberInput.SelectedNumericValue,
                    SelectInput selectInput => (object)selectInput.SelectedOption,
                    TextInput textInput => (object)textInput.TextValue,
                    _ => null,
                },
            })
            // filter out the button and other gibberish
            .Where(kv => kv.value is not null)
            .ToDictionary(kv => kv.name.ToSnakeCase(), kv => kv.value);

        var formattedJson = JsonSerializer.Serialize(values, new JsonSerializerOptions { IndentSize = 4, WriteIndented = true });
        ShowSuccess("Successfully submitted form with data:");
        ShowInfo(formattedJson);
        Console.WriteLine("user submitted {0}", formattedJson);
    }
}