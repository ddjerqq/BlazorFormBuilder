@using Excubo.Blazor.Canvas
@using Excubo.Blazor.Canvas.Contexts
@inject IJSRuntime Js

<canvas @ref="_canvas" width="600" height="400" @ondragover:preventDefault="true" @ondrop="@Drop"></canvas>

@code {
    public record Box(string Type, int X, int Y);

    private ElementReference _canvas;
    private string? _draggingBoxType;
    private List<Box> _boxes = [];

    private void Drop(DragEventArgs e)
    {
        Console.WriteLine("dropped {0}", e.Type);

        if (_draggingBoxType is null) return;

        var x = (int)(e.ClientX - 10) / 50 * 50;
        var y = (int)(e.ClientY - 10) / 50 * 50;

        if (!_boxes.Any(b => b.X == x && b.Y == y))
            _boxes.Add(new Box(_draggingBoxType, x, y));

        _draggingBoxType = null;
        StateHasChanged();
    }

    public void SetDraggingBoxType(string type) => _draggingBoxType = type;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await using var ctx = await Js.GetContext2DAsync(_canvas);
            await ctx.FontAsync("48px serif");
            await ctx.StrokeTextAsync("Excubo.Blazor.Canvas", 0, 150);
            await DrawGrid(ctx);
        }

        await RedrawCanvas();
    }

    private async Task DrawGrid(Context2D ctx)
    {
        await using var batch = ctx.CreateBatch();
        for (var x = 0; x < 600; x += 50)
            for (var y = 0; y < 400; y += 50)
                await batch.StrokeRectAsync(x, y, 50, 50);
    }

    private async Task RedrawCanvas()
    {
        await using var ctx = await Js.GetContext2DAsync(_canvas);
        await ctx.ClearRectAsync(0, 0, 600, 400);
        await DrawGrid(ctx);

        foreach (var box in _boxes)
        {
            await ctx.FillRectAsync(box.X, box.Y, 50, 50);
        }
    }
}