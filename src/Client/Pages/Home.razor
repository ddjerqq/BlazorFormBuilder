@page "/"

<PageTitle>Home</PageTitle>

<div class="w-full h-full grid grid-cols-3 gap-2">
    <span>Components</span>
    <span>Form</span>
    <span>Edit selected component</span>

    <div id="element-picker" class="flex flex-col justify-start items-stretch gap-2 rounded-md border-2 border-dashed p-4">
        <span class="p-4 bg-primary text-primary-foreground rounded-md text-center align-middle" draggable="true">TextInput</span>
        <span class="p-4 bg-primary text-primary-foreground rounded-md text-center align-middle" draggable="true">NumberInput</span>
        <span class="p-4 bg-primary text-primary-foreground rounded-md text-center align-middle" draggable="true">Select</span>
        <span class="p-4 bg-primary text-primary-foreground rounded-md text-center align-middle" draggable="true">Checkbox</span>
        <span class="p-4 bg-primary text-primary-foreground rounded-md text-center align-middle" draggable="true">DateTime</span>
        <span class="p-4 bg-primary text-primary-foreground rounded-md text-center align-middle" draggable="true">Button</span>
    </div>

    <div id="builder" class="flex flex-col justify-start items-stretch gap-2 rounded-md border-2 border-dashed p-4"></div>

    <div id="edit-panel" class="flex flex-col justify-start items-stretch gap-2 rounded-md border-2 border-dashed p-4"></div>
</div>

<script>
    // Containers
    const leftContainer = document.getElementById("element-picker");
    const rightContainer = document.getElementById("builder");
    const containers = [leftContainer, rightContainer];

    let currentDraggingElement = null;
    let originContainer = null;

    // Add drag listeners to an element.
    const addDragListeners = (element) => {
        element.addEventListener("dragstart", e => {
            currentDraggingElement = element;
            originContainer = element.parentElement;
            element.classList.add("opacity-50", "dragging");
        });
        element.addEventListener("dragend", e => {
            currentDraggingElement = null;
            originContainer = null;
            element.classList.remove("opacity-50", "dragging");
        });
    };

    // Initially add drag listeners to all draggable elements.
    document.querySelectorAll("[draggable=true]").forEach(addDragListeners);

    // Utility: Get the element after which the dragged item should be inserted.
    const getDragAfterElement = (container, y) => {
        const draggableElements = [...container.querySelectorAll("[draggable=true]:not(.dragging)")];
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            return offset < 0 && offset > closest.offset
                ? { offset, element: child }
                : closest;
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    };

    // Utility: Update the order (data attribute and badge) for each element in the builder.
    const updateOrderNumbers = () => {
        const builderElements = Array.from(rightContainer.querySelectorAll("[draggable=true]"));
        builderElements.forEach((elem, index) => {
            elem.dataset.order = index + 1;
            let orderBadge = elem.querySelector(".order-badge");
            if (!orderBadge) {
                orderBadge = document.createElement("span");
                orderBadge.classList.add("order-badge", "absolute", "top-0", "left-0", "bg-gray-200", "text-gray-800", "p-1", "text-xs", "rounded-bl-md");
                elem.style.position = "relative";
                elem.appendChild(orderBadge);
            }
            orderBadge.textContent = index + 1;
        });
    };

    // Set up drag and drop events on each container.
    containers.forEach(container => {
        container.addEventListener("dragover", e => {
            e.preventDefault();
            // Prevent drop feedback on the left container for elements originating from the builder.
            if (container === leftContainer && originContainer === rightContainer) return;
        });

        container.addEventListener("drop", e => {
            e.preventDefault();
            // Prevent dropping elements from the builder back into the left container.
            if (container === leftContainer && originContainer === rightContainer) return;

            const afterElement = getDragAfterElement(container, e.clientY);

            if (container === originContainer) {
                // Moving/reordering within the same container.
                if (afterElement == null) {
                    container.appendChild(currentDraggingElement);
                } else {
                    container.insertBefore(currentDraggingElement, afterElement);
                }
            } else {
                // Dropping from left to right: clone the element.
                const clone = currentDraggingElement.cloneNode(true);
                clone.classList.remove("opacity-50", "dragging");
                clone.style.position = "relative";

                // Create remove button (using your TailwindCSS classes).
                const removeBtn = document.createElement("span");
                removeBtn.textContent = "X";
                removeBtn.setAttribute("draggable", "false");
                removeBtn.classList.add("absolute", "top-0", "right-0", "cursor-pointer", "bg-destructive", "text-destructive-foreground", "p-1", "text-xs", "rounded-tr-md");
                removeBtn.addEventListener("click", e => {
                    e.stopPropagation();
                    clone.remove();
                    updateOrderNumbers();
                });
                clone.appendChild(removeBtn);

                // Create order badge (initially empty; updated later).
                const orderBadge = document.createElement("span");
                orderBadge.classList.add("order-badge", "absolute", "top-0", "left-[5px]", "w-[20px]", "rounded-b-md", "bg-secondary", "text-secondary-foreground", "p-1", "text-xs", "rounded-bl-md");
                clone.appendChild(orderBadge);

                addDragListeners(clone);

                if (afterElement == null) {
                    container.appendChild(clone);
                } else {
                    container.insertBefore(clone, afterElement);
                }
            }

            // If the drop happened in the builder, update the order numbers.
            if (container === rightContainer) {
                updateOrderNumbers();
            }
        });
    });

    // Optional: Update order numbers on dragend in the builder.
    rightContainer.addEventListener("dragend", updateOrderNumbers);
</script>